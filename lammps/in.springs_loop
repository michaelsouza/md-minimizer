# LAMMPS input script for a 2D spring network

# 1. Initialization
# --------------------
units           lj          # Use standard Lennard-Jones units
dimension       2           # This is a 2D simulation
boundary        p p p       # Periodic in all directions to allow large displacements
atom_style      bond        # We have particles connected by bonds

# 2. System Definition
# --------------------
read_data       data.springs # Read particle positions and bonds from data file

# 3. Settings
# --------------------
# -- Interactions
bond_style      harmonic      # Use a simple harmonic spring potential F = -k(r-r0)
bond_coeff      1 100.0 1.0   # For bond type 1: k=100.0, r0=1.0 (rest length)

# -- Add random displacement to initial grid positions
displace_atoms  all random 0.01 0.01 0.0 8675309

# -- Define Groups
region          bottom_plane block INF INF 0.0 0.1 INF INF   # Region for bottom bar
region          top_plane    block INF INF 8.9 9.0 INF INF   # Region for top bar
group           bottom       region bottom_plane              # Atoms in the bottom bar
group           top          region top_plane                  # Atoms in the top bar
group           fixed        union bottom top                  # Union of both bars

# -- Fix the bottom bar in place
fix             1 bottom setforce 0.0 0.0 0.0  # Fix the bottom bar by zeroing its force

# -- Initial Energy Minimization
echo            both
print           "Performing initial energy minimization..."
min_style       cg
minimize        1.0e-4 1.0e-6 1000 10000
print           "Initial minimization complete."

# 4. Quasi-static Pulling Loop
# --------------------
print           "Starting quasi-static pulling simulation..."
print           "Step,TotalEnergy" # CSV header for easy parsing

# -- Loop and displacement variables
variable D equal 9.0                # Initial distance between bars (Ny-1)*spacing
variable pull_dist equal 0.1*${D}   # Displacement distance for each step (0.9)
variable n_steps equal 10           # Total number of pulling steps

# -- Define a variable for total energy for easier printing
variable E equal etotal

# -- The main loop starts here
label           pull_loop
variable        i loop ${n_steps}

    # Displace the top atom group
    displace_atoms  top move 0 ${pull_dist} 0 units box

    # Minimize the system's energy after displacement to find a stable state
    minimize        1.0e-4 1.0e-6 1000 10000

    # Print the current step number and the calculated total energy
    print           "${i},${E}"

    # Dump coordinates for visualization at each step
    dump            1 all custom 1 dump.springs_loop.${i}.lammpstrj id type x y z
    run             0
    undump          1    

next            i
jump            in.springs_loop pull_loop

print           "Simulation loop finished."
