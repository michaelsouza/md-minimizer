# LAMMPS input script for a 2D spring network (using atom types for groups)

# 1. Initialization
# --------------------
units           lj
dimension       2
boundary        p f p
atom_style      bond

# 2. System Definition
# --------------------
# This data file MUST have:
# - 3 atom types: 1=mobile, 2=bottom, 3=top
# - 2 bond types: 1=stiff, 2=soft
read_data       data.springs

# 3. Settings
# --------------------
# -- Interactions
bond_style      harmonic
# bond_coeff bond_type K R0
bond_coeff      1 100.0 1.0  # Stiff springs
bond_coeff      2 50.0  1.0  # Soft springs (half stiffness)

# -- Define a non-interacting pair style to force neighbor list builds.
# This is the critical fix for the "Bond atom missing" error, as it
# makes the subsequent 'neighbor' command effective.
pair_style      zero 1.0
pair_coeff      * *

# -- Neighbor list settings
# Increase the skin distance to handle large displacements between minimizations.
neighbor        4.0 bin
neigh_modify    every 1 delay 0 check yes

# -- Add random displacement to initial grid positions to break symmetry
displace_atoms  all random 0.01 0.01 0.0 8675309

# -- Define Groups based on Atom Type (MUCH SIMPLER AND MORE ROBUST)
group           bottom       type 2
group           top          type 3
group           mobile       type 1

# -- Fix the bars in place by zeroing out their forces.
fix             1 bottom setforce 0.0 0.0 0.0
fix             2 top setforce 0.0 0.0 0.0

# -- Initial Energy Minimization
echo            both
print           "Performing initial energy minimization..."
min_style       cg
minimize        1.0e-4 1.0e-6 1000 10000
print           "Initial minimization complete."

# 4. Quasi-static Pulling Loop
# --------------------
print           "Starting quasi-static pulling simulation..."
print           "Step,TotalEnergy" # CSV header

# -- Loop and displacement variables
variable y_max_top equal bound(top,ymax)
variable y_min_bot equal bound(bottom,ymin)
variable D_initial equal $(v_y_max_top - v_y_min_bot)
variable pull_dist equal 0.01*${D_initial}
variable n_steps equal 100

variable E equal etotal

# -- Main loop (Corrected Structure)
variable i loop ${n_steps}
label           pull_loop

    displace_atoms  top move 0 ${pull_dist} 0 units box

    minimize        1.0e-4 1.0e-6 1000 10000

    print           "$(v_i),${E}"

    # Use of ${i} is the standard way to substitute a variable in a dump filename
    dump            1 all custom 1 output/dump.springs_loop.${i}.lammpstrj id type x y z
    run             0
    undump          1

    # Correctly increment the loop variable and jump back.
    # When the loop is finished, 'next' will cause the script to
    # skip the jump command and proceed.
    next            i
    jump            SELF pull_loop

label           loop_end # The 'next' command jumps here when the loop is done
print           "Simulation loop finished."