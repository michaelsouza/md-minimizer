# LAMMPS input script for a 2D spring network with breakable bonds

# 1. Initialization
# --------------------
units           lj
dimension       2
boundary        p f p
atom_style      bond

# 2. System Definition
# --------------------
read_data       data.springs

# 3. Settings
# --------------------
# -- Interactions
bond_style      harmonic
bond_coeff      1 100.0 1.0  # Stiff, breakable springs
bond_coeff      2 50.0  1.0  # Soft, unbreakable springs

# -- Non-interacting pair style for neighbor list builds
pair_style      zero 1.0
pair_coeff      * *

# -- Neighbor list settings (Increased skin to address warning in log)
neighbor        4.5 bin
neigh_modify    every 1 delay 0 check yes

# -- Add random displacement
displace_atoms  all random 0.01 0.01 0.0 8675309

# -- Define Groups based on Atom Type
group           bottom       type 2
group           top          type 3
group           mobile       type 1

# -- Fix the bars in place
fix             1 bottom setforce 0.0 0.0 0.0
fix             2 top setforce 0.0 0.0 0.0

# -- Initial Energy Minimization
echo            both
print           "Performing initial energy minimization..."
min_style       cg
minimize        1.0e-4 1.0e-6 1000 10000
print           "Initial minimization complete."

# 4. Quasi-static Pulling Loop with Bond Breaking
# --------------------
print           "Starting quasi-static pulling simulation with breakable bonds..."
print           "Step,TotalEnergy,BondsBroken_ThisStep,TotalBondsBroken" # CSV header

# -- Loop and displacement variables
variable D_initial equal (bound(top,ymax)-bound(bottom,ymin))
variable pull_dist equal 0.1*${D_initial} # Larger pull distance to see bonds break
variable n_steps equal 10

# -- Bond Breaking Variables
variable F_thresh equal 25.0         # Force threshold for breaking type 1 bonds
variable n_broken_total equal 0      # Cumulative counter for broken bonds

# -- Computes to get per-bond properties
# This compute calculates the scalar force on each bond
compute         bforce all bond/local force
# *** FIX: Use `compute bond/local` to get bond types. ***
# This compute creates an array where each row is a bond and the value is its type.
compute         btype  all bond/local btype

# -- Main loop
variable i loop ${n_steps}
label           pull_loop

    # -- A. Apply displacement
    print           "--- Pull Step ${i} ---"
    displace_atoms  top move 0 ${pull_dist} 0 units box

    # -- B. Minimize energy
    minimize        1.0e-4 1.0e-6 1000 10000

    # -- C. Check for and break over-stressed bonds
    print           "Checking for broken bonds..."
    variable n_broken_step equal 0
    variable n_bonds_current equal count(bonds,all) # Get current number of bonds

    # Loop over every bond in the system
    variable j loop ${n_bonds_current}
    label bond_check_loop
        # *** FIX: Get properties from the corrected computes ***
        # The loop index 'j' corresponds to the bond ID because our data file has
        # contiguous bond IDs starting from 1. This is a critical assumption.
        variable id   equal ${j}
        # The new 'c_btype' compute has only one column (the type).
        variable type equal c_btype[${j}]
        # This was already correct.
        variable f    equal c_bforce[${j}]

        # The core logic: if type 1 and force > threshold, "break" it
        if "${type} == 1 && ${f} > ${F_thresh}" then &
        "print 'Breaking bond ID ${id} (type ${type}) with force ${f}'" &
        "set bond ${id} coeff 0.0 1.0" & # Set K=0 to make it inert
        "variable n_broken_step equal ${n_broken_step}+1"

    next j
    jump SELF bond_check_loop

    # Update total broken count and check if re-minimization is needed
    if "${n_broken_step} > 0" then &
    "print 'Broke ${n_broken_step} bonds. Re-minimizing system.'" &
    "minimize 1.0e-4 1.0e-6 1000 10000" &
    "variable n_broken_total equal ${n_broken_total}+${n_broken_step}"

    # -- D. Output results for this step
    variable E equal etotal
    print           "${i},${E},${n_broken_step},${n_broken_total}"

    dump            1 all custom 1 output/dump.springs_loop.${i}.lammpstrj id type x y z
    run             0
    undump          1

    next i
    jump SELF pull_loop

label loop_end
print           "Simulation loop finished."
print           "A total of ${n_broken_total} bonds were broken."